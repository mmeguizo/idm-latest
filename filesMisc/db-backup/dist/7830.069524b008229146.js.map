{"version":3,"file":"7830.069524b008229146.js","mappings":"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","names":["OverlayPanel_div_0_ng_container_3_Template","rf","ctx","i0","OverlayPanel_div_0_button_4_TimesIcon_1_Template","OverlayPanel_div_0_button_4_span_2_1_ng_template_0_Template","OverlayPanel_div_0_button_4_span_2_1_Template","OverlayPanel_div_0_button_4_span_2_Template","ctx_r4","closeIconTemplate","OverlayPanel_div_0_button_4_Template","_r8","$event","ctx_r7","onCloseClick","ctx_r9","hide","ctx_r2","ariaCloseLabel","_c0","a0","a1","showTransitionParams","hideTransitionParams","_c1","value","params","OverlayPanel_div_0_Template","_r11","ctx_r10","onOverlayClick","ctx_r12","onAnimationStart","ctx_r13","onAnimationEnd","ctx_r14","onContentClick","ctx_r15","ctx_r0","styleClass","style","overlayVisible","showTransitionOptions","hideTransitionOptions","ariaLabel","ariaLabelledBy","contentTemplate","showCloseIcon","_c2","OverlayPanel","document","platformId","el","renderer","cd","zone","config","overlayService","dismissable","appendTo","autoZIndex","baseZIndex","focusOnShow","onShow","EventEmitter","onHide","templates","container","render","isOverlayAnimationInProgress","selfClick","documentClickListener","target","willHide","scrollHandler","documentResizeListener","destroyCallback","overlayEventListener","overlaySubscription","constructor","this","ngAfterContentInit","forEach","item","getType","template","markForCheck","bindDocumentClickListener","isPlatformBrowser","documentEvent","DomHandler","isIOS","listen","nativeElement","ownerDocument","event","contains","unbindDocumentClickListener","toggle","hasTargetChanged","show","currentTarget","stopPropagation","add","originalEvent","targetElement","offsetX","clientWidth","offsetY","clientHeight","appendContainer","appendChild","body","restoreAppend","align","ZIndexUtils","set","zIndex","overlay","absolutePosition","containerOffset","getOffset","targetOffset","borderRadius","defaultView","getComputedStyle","getPropertyValue","arrowLeft","left","parseFloat","setProperty","top","addClass","setStyle","toState","element","bindDocumentResizeListener","bindScrollListener","focus","e","clickObservable","subscribe","emit","unsubscribe","clear","onContainerDestroy","focusable","findSingle","runOutsideAngular","setTimeout","preventDefault","onEscapeKeydown","onWindowResize","isTouchDevice","bind","unbindDocumentResizeListener","ConnectedOverlayScrollHandler","unbindScrollListener","destroyed","ngOnDestroy","destroy","static","t","DOCUMENT","PLATFORM_ID","i1","type","selectors","contentQueries","dirIndex","PrimeTemplate","_t","hostAttrs","hostBindings","inputs","outputs","ngContentSelectors","decls","vars","consts","dependencies","i2","i3","TimesIcon","styles","encapsulation","data","animation","trigger","state","transform","opacity","transition","animate","changeDetection","OverlayPanelModule","imports","CommonModule","RippleModule","SharedModule"],"sourceRoot":"webpack:///","sources":["./node_modules/primeng/fesm2022/primeng-overlaypanel.mjs"],"sourcesContent":["import { style, state, animate, transition, trigger } from '@angular/animations';\nimport * as i2 from '@angular/common';\nimport { isPlatformBrowser, DOCUMENT, CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { EventEmitter, PLATFORM_ID, Component, ChangeDetectionStrategy, ViewEncapsulation, Inject, Input, Output, ContentChildren, HostListener, NgModule } from '@angular/core';\nimport * as i1 from 'primeng/api';\nimport { PrimeTemplate, SharedModule } from 'primeng/api';\nimport { DomHandler, ConnectedOverlayScrollHandler } from 'primeng/dom';\nimport { TimesIcon } from 'primeng/icons/times';\nimport * as i3 from 'primeng/ripple';\nimport { RippleModule } from 'primeng/ripple';\nimport { ZIndexUtils } from 'primeng/utils';\n\n/**\n * OverlayPanel is a container component positioned as connected to its target.\n * @group Components\n */\nclass OverlayPanel {\n    document;\n    platformId;\n    el;\n    renderer;\n    cd;\n    zone;\n    config;\n    overlayService;\n    /**\n     * Defines a string that labels the input for accessibility.\n     * @group Props\n     */\n    ariaLabel;\n    /**\n     * Establishes relationships between the component and label(s) where its value should be one or more element IDs.\n     * @group Props\n     */\n    ariaLabelledBy;\n    /**\n     * Enables to hide the overlay when outside is clicked.\n     * @group Props\n     */\n    dismissable = true;\n    /**\n     * When enabled, displays a close icon at top right corner.\n     * @group Props\n     */\n    showCloseIcon;\n    /**\n     * Inline style of the component.\n     * @group Props\n     */\n    style;\n    /**\n     * Style class of the component.\n     * @group Props\n     */\n    styleClass;\n    /**\n     *  Target element to attach the panel, valid values are \"body\" or a local ng-template variable of another element (note: use binding with brackets for template variables, e.g. [appendTo]=\"mydiv\" for a div element having #mydiv as variable name).\n     * @group Props\n     */\n    appendTo = 'body';\n    /**\n     * Whether to automatically manage layering.\n     * @group Props\n     */\n    autoZIndex = true;\n    /**\n     * Aria label of the close icon.\n     * @group Props\n     */\n    ariaCloseLabel;\n    /**\n     * Base zIndex value to use in layering.\n     * @group Props\n     */\n    baseZIndex = 0;\n    /**\n     * When enabled, first button receives focus on show.\n     * @group Props\n     */\n    focusOnShow = true;\n    /**\n     * Transition options of the show animation.\n     * @group Props\n     */\n    showTransitionOptions = '.12s cubic-bezier(0, 0, 0.2, 1)';\n    /**\n     * Transition options of the hide animation.\n     * @group Props\n     */\n    hideTransitionOptions = '.1s linear';\n    /**\n     * Callback to invoke when an overlay becomes visible.\n     * @group Emits\n     */\n    onShow = new EventEmitter();\n    /**\n     * Callback to invoke when an overlay gets hidden.\n     * @group Emits\n     */\n    onHide = new EventEmitter();\n    templates;\n    container;\n    overlayVisible = false;\n    render = false;\n    isOverlayAnimationInProgress = false;\n    selfClick = false;\n    documentClickListener;\n    target;\n    willHide;\n    scrollHandler;\n    documentResizeListener;\n    contentTemplate;\n    closeIconTemplate;\n    destroyCallback;\n    overlayEventListener;\n    overlaySubscription;\n    constructor(document, platformId, el, renderer, cd, zone, config, overlayService) {\n        this.document = document;\n        this.platformId = platformId;\n        this.el = el;\n        this.renderer = renderer;\n        this.cd = cd;\n        this.zone = zone;\n        this.config = config;\n        this.overlayService = overlayService;\n    }\n    ngAfterContentInit() {\n        this.templates?.forEach((item) => {\n            switch (item.getType()) {\n                case 'content':\n                    this.contentTemplate = item.template;\n                    break;\n                case 'closeicon':\n                    this.closeIconTemplate = item.template;\n                    break;\n                default:\n                    this.contentTemplate = item.template;\n                    break;\n            }\n            this.cd.markForCheck();\n        });\n    }\n    bindDocumentClickListener() {\n        if (isPlatformBrowser(this.platformId)) {\n            if (!this.documentClickListener && this.dismissable) {\n                let documentEvent = DomHandler.isIOS() ? 'touchstart' : 'click';\n                const documentTarget = this.el ? this.el.nativeElement.ownerDocument : this.document;\n                this.documentClickListener = this.renderer.listen(documentTarget, documentEvent, (event) => {\n                    if (!this.container?.contains(event.target) && this.target !== event.target && !this.target.contains(event.target) && !this.selfClick) {\n                        this.hide();\n                    }\n                    this.selfClick = false;\n                    this.cd.markForCheck();\n                });\n            }\n        }\n    }\n    unbindDocumentClickListener() {\n        if (this.documentClickListener) {\n            this.documentClickListener();\n            this.documentClickListener = null;\n            this.selfClick = false;\n        }\n    }\n    /**\n     * Toggles the visibility of the panel.\n     * @param {Event} event - Browser event\n     * @param {Target} target - Target element.\n     * @group Method\n     */\n    toggle(event, target) {\n        if (this.isOverlayAnimationInProgress) {\n            return;\n        }\n        if (this.overlayVisible) {\n            if (this.hasTargetChanged(event, target)) {\n                this.destroyCallback = () => {\n                    this.show(null, target || event.currentTarget || event.target);\n                };\n            }\n            this.hide();\n        }\n        else {\n            this.show(event, target);\n        }\n    }\n    /**\n     * Displays the panel.\n     * @param {Event} event - Browser event\n     * @param {Target} target - Target element.\n     * @group Method\n     */\n    show(event, target) {\n        target && event && event.stopPropagation();\n        if (this.isOverlayAnimationInProgress) {\n            return;\n        }\n        this.target = target || event.currentTarget || event.target;\n        this.overlayVisible = true;\n        this.render = true;\n        this.cd.markForCheck();\n    }\n    onOverlayClick(event) {\n        this.overlayService.add({\n            originalEvent: event,\n            target: this.el.nativeElement\n        });\n        this.selfClick = true;\n    }\n    onContentClick(event) {\n        const targetElement = event.target;\n        this.selfClick = event.offsetX < targetElement.clientWidth && event.offsetY < targetElement.clientHeight;\n    }\n    hasTargetChanged(event, target) {\n        return this.target != null && this.target !== (target || event.currentTarget || event.target);\n    }\n    appendContainer() {\n        if (this.appendTo) {\n            if (this.appendTo === 'body')\n                this.renderer.appendChild(this.document.body, this.container);\n            else\n                DomHandler.appendChild(this.container, this.appendTo);\n        }\n    }\n    restoreAppend() {\n        if (this.container && this.appendTo) {\n            this.renderer.appendChild(this.el.nativeElement, this.container);\n        }\n    }\n    align() {\n        if (this.autoZIndex) {\n            ZIndexUtils.set('overlay', this.container, this.baseZIndex + this.config.zIndex.overlay);\n        }\n        DomHandler.absolutePosition(this.container, this.target);\n        const containerOffset = DomHandler.getOffset(this.container);\n        const targetOffset = DomHandler.getOffset(this.target);\n        const borderRadius = this.document.defaultView?.getComputedStyle(this.container).getPropertyValue('border-radius');\n        let arrowLeft = 0;\n        if (containerOffset.left < targetOffset.left) {\n            arrowLeft = targetOffset.left - containerOffset.left - parseFloat(borderRadius) * 2;\n        }\n        this.container?.style.setProperty('--overlayArrowLeft', `${arrowLeft}px`);\n        if (containerOffset.top < targetOffset.top) {\n            DomHandler.addClass(this.container, 'p-overlaypanel-flipped');\n            if (this.showCloseIcon) {\n                this.renderer.setStyle(this.container, 'margin-top', '-30px');\n            }\n        }\n    }\n    onAnimationStart(event) {\n        if (event.toState === 'open') {\n            this.container = event.element;\n            this.appendContainer();\n            this.align();\n            this.bindDocumentClickListener();\n            this.bindDocumentResizeListener();\n            this.bindScrollListener();\n            if (this.focusOnShow) {\n                this.focus();\n            }\n            this.overlayEventListener = (e) => {\n                if (this.container && this.container.contains(e.target)) {\n                    this.selfClick = true;\n                }\n            };\n            this.overlaySubscription = this.overlayService.clickObservable.subscribe(this.overlayEventListener);\n            this.onShow.emit(null);\n        }\n        this.isOverlayAnimationInProgress = true;\n    }\n    onAnimationEnd(event) {\n        switch (event.toState) {\n            case 'void':\n                if (this.destroyCallback) {\n                    this.destroyCallback();\n                    this.destroyCallback = null;\n                }\n                if (this.overlaySubscription) {\n                    this.overlaySubscription.unsubscribe();\n                }\n                break;\n            case 'close':\n                if (this.autoZIndex) {\n                    ZIndexUtils.clear(this.container);\n                }\n                if (this.overlaySubscription) {\n                    this.overlaySubscription.unsubscribe();\n                }\n                this.onContainerDestroy();\n                this.onHide.emit({});\n                this.render = false;\n                break;\n        }\n        this.isOverlayAnimationInProgress = false;\n    }\n    focus() {\n        let focusable = DomHandler.findSingle(this.container, '[autofocus]');\n        if (focusable) {\n            this.zone.runOutsideAngular(() => {\n                setTimeout(() => focusable.focus(), 5);\n            });\n        }\n    }\n    /**\n     * Hides the panel.\n     * @group Method\n     */\n    hide() {\n        this.overlayVisible = false;\n        this.cd.markForCheck();\n    }\n    onCloseClick(event) {\n        this.hide();\n        event.preventDefault();\n    }\n    onEscapeKeydown(event) {\n        this.hide();\n    }\n    onWindowResize() {\n        if (this.overlayVisible && !DomHandler.isTouchDevice()) {\n            this.hide();\n        }\n    }\n    bindDocumentResizeListener() {\n        if (isPlatformBrowser(this.platformId)) {\n            if (!this.documentResizeListener) {\n                const window = this.document.defaultView;\n                this.documentResizeListener = this.renderer.listen(window, 'resize', this.onWindowResize.bind(this));\n            }\n        }\n    }\n    unbindDocumentResizeListener() {\n        if (this.documentResizeListener) {\n            this.documentResizeListener();\n            this.documentResizeListener = null;\n        }\n    }\n    bindScrollListener() {\n        if (isPlatformBrowser(this.platformId)) {\n            if (!this.scrollHandler) {\n                this.scrollHandler = new ConnectedOverlayScrollHandler(this.target, () => {\n                    if (this.overlayVisible) {\n                        this.hide();\n                    }\n                });\n            }\n            this.scrollHandler.bindScrollListener();\n        }\n    }\n    unbindScrollListener() {\n        if (this.scrollHandler) {\n            this.scrollHandler.unbindScrollListener();\n        }\n    }\n    onContainerDestroy() {\n        if (!this.cd.destroyed) {\n            this.target = null;\n        }\n        this.unbindDocumentClickListener();\n        this.unbindDocumentResizeListener();\n        this.unbindScrollListener();\n    }\n    ngOnDestroy() {\n        if (this.scrollHandler) {\n            this.scrollHandler.destroy();\n            this.scrollHandler = null;\n        }\n        if (this.container && this.autoZIndex) {\n            ZIndexUtils.clear(this.container);\n        }\n        if (!this.cd.destroyed) {\n            this.target = null;\n        }\n        this.destroyCallback = null;\n        if (this.container) {\n            this.restoreAppend();\n            this.onContainerDestroy();\n        }\n        if (this.overlaySubscription) {\n            this.overlaySubscription.unsubscribe();\n        }\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.5\", ngImport: i0, type: OverlayPanel, deps: [{ token: DOCUMENT }, { token: PLATFORM_ID }, { token: i0.ElementRef }, { token: i0.Renderer2 }, { token: i0.ChangeDetectorRef }, { token: i0.NgZone }, { token: i1.PrimeNGConfig }, { token: i1.OverlayService }], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"17.0.5\", type: OverlayPanel, selector: \"p-overlayPanel\", inputs: { ariaLabel: \"ariaLabel\", ariaLabelledBy: \"ariaLabelledBy\", dismissable: \"dismissable\", showCloseIcon: \"showCloseIcon\", style: \"style\", styleClass: \"styleClass\", appendTo: \"appendTo\", autoZIndex: \"autoZIndex\", ariaCloseLabel: \"ariaCloseLabel\", baseZIndex: \"baseZIndex\", focusOnShow: \"focusOnShow\", showTransitionOptions: \"showTransitionOptions\", hideTransitionOptions: \"hideTransitionOptions\" }, outputs: { onShow: \"onShow\", onHide: \"onHide\" }, host: { listeners: { \"document:keydown.escape\": \"onEscapeKeydown($event)\" }, classAttribute: \"p-element\" }, queries: [{ propertyName: \"templates\", predicate: PrimeTemplate }], ngImport: i0, template: `\n        <div\n            *ngIf=\"render\"\n            [ngClass]=\"'p-overlaypanel p-component'\"\n            [ngStyle]=\"style\"\n            [class]=\"styleClass\"\n            (click)=\"onOverlayClick($event)\"\n            [@animation]=\"{ value: overlayVisible ? 'open' : 'close', params: { showTransitionParams: showTransitionOptions, hideTransitionParams: hideTransitionOptions } }\"\n            (@animation.start)=\"onAnimationStart($event)\"\n            (@animation.done)=\"onAnimationEnd($event)\"\n            role=\"dialog\"\n            [attr.aria-modal]=\"overlayVisible\"\n            [attr.aria-label]=\"ariaLabel\"\n            [attr.aria-labelledBy]=\"ariaLabelledBy\"\n        >\n            <div class=\"p-overlaypanel-content\" (click)=\"onContentClick($event)\" (mousedown)=\"onContentClick($event)\">\n                <ng-content></ng-content>\n                <ng-container *ngTemplateOutlet=\"contentTemplate\"></ng-container>\n            </div>\n            <button *ngIf=\"showCloseIcon\" type=\"button\" class=\"p-overlaypanel-close p-link\" (click)=\"onCloseClick($event)\" (keydown.enter)=\"hide()\" [attr.aria-label]=\"ariaCloseLabel\" pRipple>\n                <TimesIcon *ngIf=\"!closeIconTemplate\" [styleClass]=\"'p-overlaypanel-close-icon'\" />\n                <span class=\"p-overlaypanel-close-icon\" *ngIf=\"closeIconTemplate\">\n                    <ng-template *ngTemplateOutlet=\"closeIconTemplate\"></ng-template>\n                </span>\n            </button>\n        </div>\n    `, isInline: true, styles: [\"@layer primeng{.p-overlaypanel{position:absolute;margin-top:10px;top:0;left:0}.p-overlaypanel-flipped{margin-top:0;margin-bottom:10px}.p-overlaypanel-close{display:flex;justify-content:center;align-items:center;overflow:hidden;position:relative}.p-overlaypanel:after,.p-overlaypanel:before{bottom:100%;left:calc(var(--overlayArrowLeft, 0) + 1.25rem);content:\\\" \\\";height:0;width:0;position:absolute;pointer-events:none}.p-overlaypanel:after{border-width:8px;margin-left:-8px}.p-overlaypanel:before{border-width:10px;margin-left:-10px}.p-overlaypanel-shifted:after,.p-overlaypanel-shifted:before{left:auto;right:1.25em;margin-left:auto}.p-overlaypanel-flipped:after,.p-overlaypanel-flipped:before{bottom:auto;top:100%}.p-overlaypanel.p-overlaypanel-flipped:after{border-bottom-color:transparent}.p-overlaypanel.p-overlaypanel-flipped:before{border-bottom-color:transparent}}\\n\"], dependencies: [{ kind: \"directive\", type: i0.forwardRef(() => i2.NgClass), selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { kind: \"directive\", type: i0.forwardRef(() => i2.NgIf), selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i0.forwardRef(() => i2.NgTemplateOutlet), selector: \"[ngTemplateOutlet]\", inputs: [\"ngTemplateOutletContext\", \"ngTemplateOutlet\", \"ngTemplateOutletInjector\"] }, { kind: \"directive\", type: i0.forwardRef(() => i2.NgStyle), selector: \"[ngStyle]\", inputs: [\"ngStyle\"] }, { kind: \"directive\", type: i0.forwardRef(() => i3.Ripple), selector: \"[pRipple]\" }, { kind: \"component\", type: i0.forwardRef(() => TimesIcon), selector: \"TimesIcon\" }], animations: [\n            trigger('animation', [\n                state('void', style({\n                    transform: 'scaleY(0.8)',\n                    opacity: 0\n                })),\n                state('close', style({\n                    opacity: 0\n                })),\n                state('open', style({\n                    transform: 'translateY(0)',\n                    opacity: 1\n                })),\n                transition('void => open', animate('{{showTransitionParams}}')),\n                transition('open => close', animate('{{hideTransitionParams}}'))\n            ])\n        ], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.5\", ngImport: i0, type: OverlayPanel, decorators: [{\n            type: Component,\n            args: [{ selector: 'p-overlayPanel', template: `\n        <div\n            *ngIf=\"render\"\n            [ngClass]=\"'p-overlaypanel p-component'\"\n            [ngStyle]=\"style\"\n            [class]=\"styleClass\"\n            (click)=\"onOverlayClick($event)\"\n            [@animation]=\"{ value: overlayVisible ? 'open' : 'close', params: { showTransitionParams: showTransitionOptions, hideTransitionParams: hideTransitionOptions } }\"\n            (@animation.start)=\"onAnimationStart($event)\"\n            (@animation.done)=\"onAnimationEnd($event)\"\n            role=\"dialog\"\n            [attr.aria-modal]=\"overlayVisible\"\n            [attr.aria-label]=\"ariaLabel\"\n            [attr.aria-labelledBy]=\"ariaLabelledBy\"\n        >\n            <div class=\"p-overlaypanel-content\" (click)=\"onContentClick($event)\" (mousedown)=\"onContentClick($event)\">\n                <ng-content></ng-content>\n                <ng-container *ngTemplateOutlet=\"contentTemplate\"></ng-container>\n            </div>\n            <button *ngIf=\"showCloseIcon\" type=\"button\" class=\"p-overlaypanel-close p-link\" (click)=\"onCloseClick($event)\" (keydown.enter)=\"hide()\" [attr.aria-label]=\"ariaCloseLabel\" pRipple>\n                <TimesIcon *ngIf=\"!closeIconTemplate\" [styleClass]=\"'p-overlaypanel-close-icon'\" />\n                <span class=\"p-overlaypanel-close-icon\" *ngIf=\"closeIconTemplate\">\n                    <ng-template *ngTemplateOutlet=\"closeIconTemplate\"></ng-template>\n                </span>\n            </button>\n        </div>\n    `, animations: [\n                        trigger('animation', [\n                            state('void', style({\n                                transform: 'scaleY(0.8)',\n                                opacity: 0\n                            })),\n                            state('close', style({\n                                opacity: 0\n                            })),\n                            state('open', style({\n                                transform: 'translateY(0)',\n                                opacity: 1\n                            })),\n                            transition('void => open', animate('{{showTransitionParams}}')),\n                            transition('open => close', animate('{{hideTransitionParams}}'))\n                        ])\n                    ], changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, host: {\n                        class: 'p-element'\n                    }, styles: [\"@layer primeng{.p-overlaypanel{position:absolute;margin-top:10px;top:0;left:0}.p-overlaypanel-flipped{margin-top:0;margin-bottom:10px}.p-overlaypanel-close{display:flex;justify-content:center;align-items:center;overflow:hidden;position:relative}.p-overlaypanel:after,.p-overlaypanel:before{bottom:100%;left:calc(var(--overlayArrowLeft, 0) + 1.25rem);content:\\\" \\\";height:0;width:0;position:absolute;pointer-events:none}.p-overlaypanel:after{border-width:8px;margin-left:-8px}.p-overlaypanel:before{border-width:10px;margin-left:-10px}.p-overlaypanel-shifted:after,.p-overlaypanel-shifted:before{left:auto;right:1.25em;margin-left:auto}.p-overlaypanel-flipped:after,.p-overlaypanel-flipped:before{bottom:auto;top:100%}.p-overlaypanel.p-overlaypanel-flipped:after{border-bottom-color:transparent}.p-overlaypanel.p-overlaypanel-flipped:before{border-bottom-color:transparent}}\\n\"] }]\n        }], ctorParameters: () => [{ type: Document, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [PLATFORM_ID]\n                }] }, { type: i0.ElementRef }, { type: i0.Renderer2 }, { type: i0.ChangeDetectorRef }, { type: i0.NgZone }, { type: i1.PrimeNGConfig }, { type: i1.OverlayService }], propDecorators: { ariaLabel: [{\n                type: Input\n            }], ariaLabelledBy: [{\n                type: Input\n            }], dismissable: [{\n                type: Input\n            }], showCloseIcon: [{\n                type: Input\n            }], style: [{\n                type: Input\n            }], styleClass: [{\n                type: Input\n            }], appendTo: [{\n                type: Input\n            }], autoZIndex: [{\n                type: Input\n            }], ariaCloseLabel: [{\n                type: Input\n            }], baseZIndex: [{\n                type: Input\n            }], focusOnShow: [{\n                type: Input\n            }], showTransitionOptions: [{\n                type: Input\n            }], hideTransitionOptions: [{\n                type: Input\n            }], onShow: [{\n                type: Output\n            }], onHide: [{\n                type: Output\n            }], templates: [{\n                type: ContentChildren,\n                args: [PrimeTemplate]\n            }], onEscapeKeydown: [{\n                type: HostListener,\n                args: ['document:keydown.escape', ['$event']]\n            }] } });\nclass OverlayPanelModule {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.5\", ngImport: i0, type: OverlayPanelModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"17.0.5\", ngImport: i0, type: OverlayPanelModule, declarations: [OverlayPanel], imports: [CommonModule, RippleModule, SharedModule, TimesIcon], exports: [OverlayPanel, SharedModule] });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"17.0.5\", ngImport: i0, type: OverlayPanelModule, imports: [CommonModule, RippleModule, SharedModule, TimesIcon, SharedModule] });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.5\", ngImport: i0, type: OverlayPanelModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule, RippleModule, SharedModule, TimesIcon],\n                    exports: [OverlayPanel, SharedModule],\n                    declarations: [OverlayPanel]\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { OverlayPanel, OverlayPanelModule };\n"],"x_google_ignoreList":[0]}